C51 COMPILER V9.56.0.0   CPLD                                                              11/10/2017 09:15:02 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE CPLD
OBJECT MODULE PLACED IN CPLD.OBJ
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE CPLD.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(C:\Keil_v5\C51\INC\SiLABS\sh
                    -ared\si8051Base) DEBUG PRINT(.\Listings\CPLD.lst) TABS(2)

line level    source

   1          #include <REG_MPC89L51-515.h>
   2          #include "CPLD.h"
   3          #include "delay.h"
   4          
   5          
   6          /*==============================*/
   7          /*===     CPLD 腳位宣告      ===*/
   8          /*==============================*/
   9          
  10          //_at_  用途：位址定義           說明：定義變數放置於資料記憶體的位置 (平時用的指
             -標為系統隨機給位址)
  11          //xdata 用途：記憶體模組區段宣告  說明：宣告8051外部資料記憶體(沒宣告xdata系統
             -會直接給data)
  12          
  13          /** output port **/
  14          unsigned char xdata  OT4000   _at_ 0x4000;
  15          unsigned char xdata  OT5000   _at_ 0x5000;
  16          unsigned char xdata  OT6000   _at_ 0x6000;
  17          unsigned char xdata  OT7000   _at_ 0x7000;
  18          unsigned char xdata  OT8000   _at_ 0x8000;
  19          unsigned char xdata  OT9000   _at_ 0x9000;
  20          unsigned char xdata  OTA000   _at_ 0xA000;
  21          unsigned char xdata  OTB000   _at_ 0xB000;
  22          
  23          
  24          
  25          /** CPLD 暫存變數用 **/
  26          typedef idata struct {
  27            unsigned char out4000;
  28            unsigned char out5000;        
  29            unsigned char out6000;      
  30            unsigned char out7000;
  31            unsigned char out8000;
  32            unsigned char out9000;  
  33            unsigned char outA000;      
  34            unsigned char outB000;
  35            
  36          }CPLD;
  37          CPLD my_cpld;
  38          
  39          /*==============================*/
  40          /*===     CPLD 函式控制      ===*/
  41          /*==============================*/
  42          
  43          void cpld_variable_Init(void) {
  44   1          my_cpld.out4000 = 0;
  45   1          my_cpld.out5000 = 0;
  46   1          my_cpld.out6000 = 0;
  47   1          my_cpld.out7000 = 0;
  48   1          my_cpld.out8000 = 0;
  49   1          my_cpld.out9000 = 0;
  50   1          my_cpld.outA000 = 0;
  51   1          my_cpld.outB000 = 0;
  52   1      }
C51 COMPILER V9.56.0.0   CPLD                                                              11/10/2017 09:15:02 PAGE 2   

  53          
  54          /** (1ms)將暫存的CLPD變數(my_cpld)直接輸出到該腳位 **/
  55          void cpld_action(void) {
  56   1          OT4000 = my_cpld.out4000;
  57   1          OT5000 = my_cpld.out5000;
  58   1          OT6000 = my_cpld.out6000;
  59   1          OT7000 = my_cpld.out7000;
  60   1          OT8000 = my_cpld.out8000;
  61   1          OT9000 = my_cpld.out9000;
  62   1          OTA000 = my_cpld.outA000;
  63   1          OTB000 = my_cpld.outB000;
  64   1      }
  65          
  66          /**CPLD 輸出函式**/
  67          /** name : 0XAB A=觸發IC腳位 B=要控制的IC腳位(第0~7腳)
  68          /** bit : 判斷是否為 0:AND(OFF結果) or 1:OR(ON結果)
  69          */
  70          void cpld_out( unsigned char name, bit Logic) {   
  71   1      
  72   1        unsigned char idata address, Bit;
  73   1        //ET1 = 0;                    //Timer1 致能中斷(中斷時使用的CPLD也是此函式)
  74   1        
  75   1        address = name>>4;            //取十位數：決定 V74154 腳位
  76   1        Bit = 0x01 << (name&0x0F);    //取個位數：控制的腳位編號(第幾支腳)
  77   1        
  78   1        switch( address ) {
  79   2          case 4: 
  80   2                  if( Logic ) //if() 沒給條件，則0為Fault，其他數值為True
  81   2                    my_cpld.out4000 |= Bit; //開啟CPLD腳位
  82   2                  else
  83   2                    my_cpld.out4000 &= ~Bit; //"~" 反相：關閉CPLD腳位
  84   2                  break;
  85   2          case 5: 
  86   2                  if( Logic )
  87   2                    my_cpld.out5000 |= Bit;
  88   2                  else
  89   2                    my_cpld.out5000 &= ~Bit;
  90   2                  break;
  91   2          case 6: 
  92   2                  if( Logic )
  93   2                    my_cpld.out6000 |= Bit;
  94   2                  else
  95   2                    my_cpld.out6000 &= ~Bit;
  96   2                  break;
  97   2          case 7: 
  98   2                  if( Logic )
  99   2                    my_cpld.out7000 |= Bit;
 100   2                  else
 101   2                    my_cpld.out7000 &= ~Bit;
 102   2                  break;
 103   2          case 8: 
 104   2                  if( Logic )
 105   2                    my_cpld.out8000 |= Bit;
 106   2                  else
 107   2                    my_cpld.out8000 &= ~Bit;
 108   2                  break;
 109   2          case 9: 
 110   2                  if( Logic )
 111   2                    my_cpld.out9000 |= Bit;
 112   2                  else
 113   2                    my_cpld.out9000 &= ~Bit;
 114   2                  break;  
C51 COMPILER V9.56.0.0   CPLD                                                              11/10/2017 09:15:02 PAGE 3   

 115   2          case 10: 
 116   2                  if( Logic )
 117   2                    my_cpld.outA000 |= Bit;
 118   2                  else
 119   2                    my_cpld.outA000 &= ~Bit;
 120   2                  break;
 121   2          case 11: 
 122   2                  if( Logic )
 123   2                    my_cpld.outB000 |= Bit;
 124   2                  else
 125   2                    my_cpld.outB000 &= ~Bit;
 126   2                  break;
 127   2                    //delay1ms(1000);
 128   2          default:
 129   2            break;
 130   2        }
 131   1        //ET1 = 1;  //Timer1 致能開啟
 132   1        cpld_action(); //立即執行
 133   1      }
 134          
 135          /*--直接對指定的CPLD進行控制 (用於測試程式)--*/
 136          //unsigned char dir_con_buf;
 137          //void cpld_direct_control(unsigned char SW) {
 138          
 139          //  switch(SW) {
 140          //  
 141          //    case AND: 
 142          //      dir_con_buf &= 0xF7;
 143          //      OTB000 = dir_con_buf;
 144          //    break;
 145          
 146          //    case OR:
 147          //      dir_con_buf |= 0x08;
 148          //      OTB000 = dir_con_buf;
 149          //    break;
 150          //    
 151          //    default:  
 152          //      break;
 153          //  }
 154          
 155          //}
 156          
 157          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    286    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      8       2
   BIT SIZE         =   ----       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
